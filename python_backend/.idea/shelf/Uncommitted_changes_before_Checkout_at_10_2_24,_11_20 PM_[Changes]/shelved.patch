Index: main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import os\nfrom functools import lru_cache\nfrom fastapi import FastAPI, Header, HTTPException, Depends, Request\nimport finnhub\nimport time\nfrom collections import deque\nfrom fastapi.middleware.cors import CORSMiddleware\n\napp = FastAPI()\n\nAPI_KEY = os.environ.get('APP_API_KEY')\nFINNHUB_KEY = os.environ.get('FINNHUB_KEY')\n\nif not FINNHUB_KEY:\n    raise ValueError(\"Finnhub API key is missing in environment variables.\")\n\n\nRATE_LIMIT = 30\nrate_limit_queue = deque()\n\n\ndef verify_api_key(x_api_key: str = Header(None)):\n    if x_api_key != API_KEY:\n        raise HTTPException(status_code=401, detail=\"Invalid or missing API key\")\n\n\n@lru_cache()\ndef get_finnhub_client():\n    return finnhub.Client(api_key=FINNHUB_KEY)\n\n\ndef rate_limit():\n    current_time = time.time()\n\n    # Remove old timestamps\n    while rate_limit_queue and rate_limit_queue[0] < current_time - 1:\n        rate_limit_queue.popleft()\n\n    if len(rate_limit_queue) >= RATE_LIMIT:\n        raise HTTPException(status_code=429, detail=\"Rate limit exceeded\")\n\n    rate_limit_queue.append(current_time)\n\n\n# Enable CORS to allow all origins (for development purposes)\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"*\"],  # Allow all origins\n    allow_credentials=True,\n    allow_methods=[\"*\"],  # Allow all HTTP methods\n    allow_headers=[\"*\"],  # Allow all HTTP headers\n)\n\n\n@app.get(\"/\")\nasync def read_root():\n    return {\"message\": \"Welcome to the CSC 478 Group 6 Stock Tracker Backend API\"}\n\n\n@app.get(\"/market_status\")\nasync def market_status(\n        request: Request,\n        api_key: str = Depends(verify_api_key)\n):\n    rate_limit()\n    client = get_finnhub_client()\n    return client.market_status(exchange='US')\n\n\n@app.get(\"/company_profile/{ticker}\")\nasync def company_profile(\n        ticker: str,\n        request: Request,\n        api_key: str = Depends(verify_api_key)\n):\n    rate_limit()\n    client = get_finnhub_client()\n    return client.company_profile2(symbol=ticker)\n\n\n@app.get(\"/quote/{ticker}\")\nasync def quote(\n        ticker: str,\n        request: Request,\n        api_key: str = Depends(verify_api_key)\n):\n    rate_limit()\n    client = get_finnhub_client()\n    return client.quote(symbol=ticker)\n\n\nif __name__ == \"__main__\":\n    client = get_finnhub_client()\n    print(client.market_status(exchange='US'))\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.py b/main.py
--- a/main.py	
+++ b/main.py	
@@ -92,3 +92,8 @@
 if __name__ == "__main__":
     client = get_finnhub_client()
     print(client.market_status(exchange='US'))
+
+
+if __name__ == "__main__":
+    client = get_finnhub_client()
+    print(client.market_status(exchange='US'))
Index: ../portfolio_tracker_frontend/app/page.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"use client\";\n\nimport React from \"react\";\nimport { Card, CardBody, CardHeader } from \"@nextui-org/card\";\nimport {\n  Table,\n  TableHeader,\n  TableColumn,\n  TableBody,\n  TableRow,\n  TableCell,\n} from \"@nextui-org/table\";\n\n// Mock data for the dashboard\nconst accountBalance = 112893.0;\nconst stockData = [\n  { symbol: \"AAPL\", name: \"Apple Inc.\", price: 150.25, change: 2.5 },\n  { symbol: \"GOOGL\", name: \"Alphabet Inc.\", price: 2750.5, change: -1.2 },\n  { symbol: \"MSFT\", name: \"Microsoft Corporation\", price: 305.75, change: 0.8 },\n  { symbol: \"AMZN\", name: \"Amazon.com Inc.\", price: 3380.2, change: 1.5 },\n];\n\nexport default function Home() {\n  return (\n      <div className=\"min-h-screen bg-background text-foreground\">\n        <main className=\"container mx-auto px-4 py-8 sm:px-6 lg:px-8\">\n          <h1 className=\"text-2xl font-bold mb-6\">Dashboard</h1>\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6\">\n            {/* Account Balance */}\n            <Card className=\"w-full\">\n              <CardHeader>Account Balance</CardHeader>\n              <CardBody>\n                <p className=\"text-2xl font-bold\">\n                  ${accountBalance.toLocaleString()}\n                </p>\n              </CardBody>\n            </Card>\n\n            {/* Stock Performance Chart (placeholder) */}\n            <Card className=\"w-full\">\n              <CardHeader>Stock Performance</CardHeader>\n              <CardBody>\n                <div className=\"h-40 sm:h-64 bg-default-200 flex items-center justify-center\">\n                  Chart Placeholder\n                </div>\n              </CardBody>\n            </Card>\n          </div>\n          {/* Stock Market Table */}\n          <Card className=\"w-full overflow-auto\">\n            <CardHeader>Stock Market</CardHeader>\n            <CardBody>\n              <Table aria-label=\"Stock market data\">\n                <TableHeader>\n                  <TableColumn>SYMBOL</TableColumn>\n                  <TableColumn>NAME</TableColumn>\n                  <TableColumn>PRICE</TableColumn>\n                  <TableColumn>CHANGE</TableColumn>\n                </TableHeader>\n                <TableBody>\n                  {stockData.map((stock) => (\n                      <TableRow key={stock.symbol}>\n                        <TableCell>{stock.symbol}</TableCell>\n                        <TableCell>{stock.name}</TableCell>\n                        <TableCell>${stock.price.toFixed(2)}</TableCell>\n                        <TableCell\n                            className={\n                              stock.change >= 0 ? \"text-success\" : \"text-danger\"\n                            }\n                        >\n                          {stock.change > 0 ? \"+\" : \"\"}\n                          {stock.change}%\n                        </TableCell>\n                      </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </CardBody>\n          </Card>\n        </main>\n      </div>\n  );\n}
===================================================================
diff --git a/../portfolio_tracker_frontend/app/page.tsx b/../portfolio_tracker_frontend/app/page.tsx
--- a/../portfolio_tracker_frontend/app/page.tsx	
+++ b/../portfolio_tracker_frontend/app/page.tsx	
@@ -1,6 +1,6 @@
 "use client";
 
-import React from "react";
+import React, { useState, useEffect } from "react";
 import { Card, CardBody, CardHeader } from "@nextui-org/card";
 import {
   Table,
@@ -10,17 +10,67 @@
   TableRow,
   TableCell,
 } from "@nextui-org/table";
+import { Spinner } from "@nextui-org/spinner";
 
-// Mock data for the dashboard
+interface StockData {
+  symbol: string;
+  name: string;
+  price: number;
+  change: number;
+}
+
 const accountBalance = 112893.0;
-const stockData = [
-  { symbol: "AAPL", name: "Apple Inc.", price: 150.25, change: 2.5 },
-  { symbol: "GOOGL", name: "Alphabet Inc.", price: 2750.5, change: -1.2 },
-  { symbol: "MSFT", name: "Microsoft Corporation", price: 305.75, change: 0.8 },
-  { symbol: "AMZN", name: "Amazon.com Inc.", price: 3380.2, change: 1.5 },
-];
+const stockSymbols = ["AAPL", "GOOGL", "MSFT", "AMZN"];
 
 export default function Home() {
+  const [stockData, setStockData] = useState<StockData[]>([]);
+  const [isLoading, setIsLoading] = useState(true);
+  const [error, setError] = useState<string | null>(null);
+
+  useEffect(() => {
+    const fetchStockData = async () => {
+      setIsLoading(true);
+      setError(null);
+      try {
+        const apiKey = process.env.NEXT_PUBLIC_API_KEY;
+        if (!apiKey) {
+          throw new Error("API key is not set");
+        }
+
+        const promises = stockSymbols.map(async (symbol) => {
+          const response = await fetch(
+              `https://lazy-vivyanne-uis-cs478-group6-d2de5ab0.koyeb.app/quote/${symbol}`,
+              {
+                headers: {
+                  'x-api-key': apiKey,
+                },
+              }
+          );
+          if (!response.ok) {
+            throw new Error(`HTTP error! status: ${response.status}`);
+          }
+          const data = await response.json();
+          return {
+            symbol,
+            name: data.companyName,
+            price: data.latestPrice,
+            change: data.changePercent * 100,
+          };
+        });
+
+        const results = await Promise.all(promises);
+        setStockData(results);
+      } catch (e) {
+        setError("Failed to fetch stock data. Please try again later.");
+        console.error("Error fetching stock data:", e);
+      } finally {
+        setIsLoading(false);
+      }
+    };
+
+    fetchStockData();
+  }, []);
+
   return (
       <div className="min-h-screen bg-background text-foreground">
         <main className="container mx-auto px-4 py-8 sm:px-6 lg:px-8">
@@ -50,31 +100,39 @@
           <Card className="w-full overflow-auto">
             <CardHeader>Stock Market</CardHeader>
             <CardBody>
-              <Table aria-label="Stock market data">
-                <TableHeader>
-                  <TableColumn>SYMBOL</TableColumn>
-                  <TableColumn>NAME</TableColumn>
-                  <TableColumn>PRICE</TableColumn>
-                  <TableColumn>CHANGE</TableColumn>
-                </TableHeader>
-                <TableBody>
-                  {stockData.map((stock) => (
-                      <TableRow key={stock.symbol}>
-                        <TableCell>{stock.symbol}</TableCell>
-                        <TableCell>{stock.name}</TableCell>
-                        <TableCell>${stock.price.toFixed(2)}</TableCell>
-                        <TableCell
-                            className={
-                              stock.change >= 0 ? "text-success" : "text-danger"
-                            }
-                        >
-                          {stock.change > 0 ? "+" : ""}
-                          {stock.change}%
-                        </TableCell>
-                      </TableRow>
-                  ))}
-                </TableBody>
-              </Table>
+              {isLoading ? (
+                  <div className="flex justify-center items-center h-40">
+                    <Spinner label="Loading stock data..." />
+                  </div>
+              ) : error ? (
+                  <div className="text-center text-danger">{error}</div>
+              ) : (
+                  <Table aria-label="Stock market data">
+                    <TableHeader>
+                      <TableColumn>SYMBOL</TableColumn>
+                      <TableColumn>NAME</TableColumn>
+                      <TableColumn>PRICE</TableColumn>
+                      <TableColumn>CHANGE</TableColumn>
+                    </TableHeader>
+                    <TableBody>
+                      {stockData.map((stock) => (
+                          <TableRow key={stock.symbol}>
+                            <TableCell>{stock.symbol}</TableCell>
+                            <TableCell>{stock.name}</TableCell>
+                            <TableCell>${stock.price.toFixed(2)}</TableCell>
+                            <TableCell
+                                className={
+                                  stock.change >= 0 ? "text-success" : "text-danger"
+                                }
+                            >
+                              {stock.change > 0 ? "+" : ""}
+                              {stock.change.toFixed(2)}%
+                            </TableCell>
+                          </TableRow>
+                      ))}
+                    </TableBody>
+                  </Table>
+              )}
             </CardBody>
           </Card>
         </main>
